{"https://doi.org/10.1145/3425898.3426953":{"title":"Shadaj Laddad, Koushik Sen: Fluid quotes: metaprogramming across abstraction boundaries with dependent types. 98-110","address":"https://doi.org/10.1145/3425898.3426953","index":0},"https://doi.org/10.1145/2993236.2993245":{"title":"Cyrus Omar, Jonathan Aldrich: Programmable semantic fragments: the design and implementation of typy. 81-92","address":"https://doi.org/10.1145/2993236.2993245","index":1},"https://doi.org/10.1145/2814204.2814209":{"title":"Pablo Inostroza, Tijs van der Storm: Modular interpreters for the masses: implicit context propagation using object algebras. 171-180","address":"https://doi.org/10.1145/2814204.2814209","index":2},"https://doi.org/10.1145/2658761.2658765":{"title":"Maria Gouseti, Chiel Peters, Tijs van der Storm: Extensible language implementation with object algebras (short paper). 25-28","address":"https://doi.org/10.1145/2658761.2658765","index":3},"https://doi.org/10.1145/2517208.2517210":{"title":"Sebastian Erdweg, Felix Rieger: A framework for extensible languages. 3-12","address":"https://doi.org/10.1145/2517208.2517210","index":4},"https://doi.org/10.1145/2517208.2517215":{"title":"Sandro Schulze, Jörg Liebig, Janet Siegmund, Sven Apel: Does the discipline of preprocessor annotations matter?: a controlled experiment. 65-74","address":"https://doi.org/10.1145/2517208.2517215","index":5},"https://doi.org/10.1145/2517208.2517228":{"title":"Georg Ofenbeck, Tiark Rompf, Alen Stojanov, Martin Odersky, Markus Püschel: Spiral in scala: towards the systematic construction of generators for performance libraries. 125-134","address":"https://doi.org/10.1145/2517208.2517228","index":6},"https://doi.org/10.1145/2517208.2517225":{"title":"Darya Kurilova, Derek Rayside: On the simplicity of synthesizing linked data structure operations. 155-158","address":"https://doi.org/10.1145/2517208.2517225","index":7},"https://doi.org/10.1145/2528265.2528269":{"title":"Don S. Batory, Peter Höfner, Bernhard Möller, Andreas Zelend: Features, modularity, and variation points. 9-16","address":"https://doi.org/10.1145/2528265.2528269","index":8},"https://doi.org/10.1145/2371401.2371409":{"title":"Eyvind W. Axelsen, Stein Krogdahl: Package templates: a definition by semantics-preserving source-to-source transformations to efficient Java code. 50-59","address":"https://doi.org/10.1145/2371401.2371409","index":9},"https://doi.org/10.1145/2371401.2371411":{"title":"Petr Spacek, Christophe Dony, Chouki Tibermacine, Luc Fabresse: An inheritance system for structural & behavioral reuse in component-based software programming. 60-69","address":"https://doi.org/10.1145/2371401.2371411","index":10},"https://doi.org/10.1145/2047862.2047891":{"title":"Sebastian Erdweg, Lennart C. L. Kats, Tillmann Rendel, Christian Kästner, Klaus Ostermann, Eelco Visser: Growing a language environment with editor libraries. 167-176","address":"https://doi.org/10.1145/2047862.2047891","index":11},"https://doi.org/10.1145/2047862.2047892":{"title":"John Freeman, Jaakko Järvi, Wonseok Kim, Mat Marcus, Sean Parent: Helping programmers help users. 177-184","address":"https://doi.org/10.1145/2047862.2047892","index":12},"https://doi.org/10.1145/1868294.1868295":{"title":"Ralf Lämmel: The hitchhiker's guide to software languages. 1-2","address":"https://doi.org/10.1145/1868294.1868295","index":13},"https://doi.org/10.1145/1868294.1868307":{"title":"Christian Hofer, Klaus Ostermann: Modular domain-specific language components in scala. 83-92","address":"https://doi.org/10.1145/1868294.1868307","index":14},"https://doi.org/10.1145/1868294.1868308":{"title":"Reinhard Wolfinger, Markus Löberbauer, Markus Jahn, Hanspeter Mössenböck: Adding genericity to a plug-in framework. 93-102","address":"https://doi.org/10.1145/1868294.1868308","index":15},"https://doi.org/10.1145/1868688.1868689":{"title":"Christian Prehofer: Feature oriented-programming: back to the future. 1","address":"https://doi.org/10.1145/1868688.1868689","index":16},"https://doi.org/10.1145/1868688.1868699":{"title":"Vinay Kulkarni: Raising family is a good practice. 72-79","address":"https://doi.org/10.1145/1868688.1868699","index":17},"https://doi.org/10.1145/1621607.1621617":{"title":"Yanhong A. Liu, Michael Gorbovitski, Scott D. Stoller: A language and framework for invariant-driven transformations. 55-64","address":"https://doi.org/10.1145/1621607.1621617","index":18},"https://doi.org/10.1145/1621607.1621624":{"title":"Florian Heidenreich, Jendrik Johannes, Mirko Seifert, Christian Wende, Marcel Böhme: Generating safe template languages. 99-108","address":"https://doi.org/10.1145/1621607.1621624","index":19},"https://doi.org/10.1145/1449913.1449919":{"title":"Chang Hwan Peter Kim, Christian Kästner, Don S. Batory: On the modularity of feature interactions. 23-34","address":"https://doi.org/10.1145/1449913.1449919","index":20},"https://doi.org/10.1145/1449913.1449927":{"title":"Jaakko Järvi, Mat Marcus, Sean Parent, John Freeman, Jacob N. Smith: Property models: from incidental algorithms to reusable components. 89-98","address":"https://doi.org/10.1145/1449913.1449927","index":21},"https://doi.org/10.1145/1449913.1449929":{"title":"Erik Meijer: Fundamentalist functional programming. 99-100","address":"https://doi.org/10.1145/1449913.1449929","index":22},"https://doi.org/10.1145/1449913.1449935":{"title":"Christian Hofer, Klaus Ostermann, Tillmann Rendel, Adriaan Moors: Polymorphic embedding of dsls. 137-148","address":"https://doi.org/10.1145/1449913.1449935","index":23},"https://doi.org/10.1145/1289971.1289996":{"title":"Tetsuo Kamina, Tetsuo Tamai: Lightweight scalable components. 145-154","address":"https://doi.org/10.1145/1289971.1289996","index":24},"https://doi.org/10.1007/11561347_7":{"title":"Julia L. Lawall, Hervé Duchesne, Gilles Muller, Anne-Françoise Le Meur: Bossa Nova: Introducing Modularity into the Bossa Domain-Specific Language. 78-93","address":"https://doi.org/10.1007/11561347_7","index":25},"https://doi.org/10.1007/11561347_25":{"title":"Ryan Culpepper, Scott Owens, Matthew Flatt: Syntactic Abstraction in Component Interfaces. 373-388","address":"https://doi.org/10.1007/11561347_25","index":26},"https://doi.org/10.1007/978-3-540-30175-2_26":{"title":"Jack Greenfield: Software Factories: Assembling Applications with Patterns, Models, Frameworks and Tools. 488","address":"https://doi.org/10.1007/978-3-540-30175-2_26","index":27},"https://doi.org/10.1007/978-3-540-30175-2_27":{"title":"Peter D. Mosses: Modular Language Descriptions. 489","address":"https://doi.org/10.1007/978-3-540-30175-2_27","index":28},"https://doi.org/10.1007/978-3-540-39815-8_16":{"title":"Peri L. Tarr: Towards a More Piece-ful World. 265-266","address":"https://doi.org/10.1007/978-3-540-39815-8_16","index":29},"https://doi.org/10.1007/3-540-45821-2_13":{"title":"Oleg Kiselyov: Macros That Compose: Systematic Macro Programming. 202-217","address":"https://doi.org/10.1007/3-540-45821-2_13","index":30},"index":0}